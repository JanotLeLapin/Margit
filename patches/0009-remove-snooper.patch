From: Joseph DALY <joseph300905@gmail.com>
Date: Wed, 26 Jun 2024 20:00:59 +0200
Subject: [PATCH] remove snooper


diff --git a/main/java/net/minecraft/server/DedicatedServer.java b/main/java/net/minecraft/server/DedicatedServer.java
index 0158fcf..d24af9a 100644
--- a/main/java/net/minecraft/server/DedicatedServer.java
+++ b/main/java/net/minecraft/server/DedicatedServer.java
@@ -163,7 +163,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 this.aB();
                 this.getEnableCommandBlock();
                 this.p();
-                this.getSnooperEnabled();
                 this.aK();
                 this.c(this.propertyManager.getInt("max-build-height", 256));
                 this.c((this.getMaxBuildHeight() + 8) / 16 * 16);
@@ -261,16 +260,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return this.propertyManager.getBoolean("spawn-monsters", true);
     }
 
-    public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aP().getHasWhitelist()));
-        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aP().getWhitelisted().length));
-        super.a(mojangstatisticsgenerator);
-    }
-
-    public boolean getSnooperEnabled() {
-        return this.propertyManager.getBoolean("snooper-enabled", true);
-    }
-
     public void issueCommand(String s, ICommandListener icommandlistener) {
         this.l.add(new ServerCommand(s, icommandlistener));
     }
diff --git a/main/java/net/minecraft/server/IMojangStatistics.java b/main/java/net/minecraft/server/IMojangStatistics.java
deleted file mode 100644
index d906c9c..0000000
--- a/main/java/net/minecraft/server/IMojangStatistics.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package net.minecraft.server;
-
-public interface IMojangStatistics {
-
-    void a(MojangStatisticsGenerator mojangstatisticsgenerator);
-
-    void b(MojangStatisticsGenerator mojangstatisticsgenerator);
-
-    boolean getSnooperEnabled();
-}
diff --git a/main/java/net/minecraft/server/MinecraftServer.java b/main/java/net/minecraft/server/MinecraftServer.java
index 2bc2879..f42679b 100644
--- a/main/java/net/minecraft/server/MinecraftServer.java
+++ b/main/java/net/minecraft/server/MinecraftServer.java
@@ -39,13 +39,12 @@ import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
+public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler {
 
     public static final Logger LOGGER = LogManager.getLogger(MinecraftServer.class);
     public static final File a = new File("usercache.json");
     private static MinecraftServer l;
     public Convertable convertable;
-    private final MojangStatisticsGenerator n = new MojangStatisticsGenerator("server", this, az());
     public File universe;
     private final List<IUpdatePlayerListBox> p = Lists.newArrayList();
     protected final ICommandHandler b;
@@ -316,11 +315,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                     worldserver.saveLevel();
                 }
             }
-
-            if (this.n.d()) {
-                this.n.e();
-            }
-
         }
     }
 
@@ -484,14 +478,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.methodProfiler.a("tallying");
         this.h[this.ticks % 100] = System.nanoTime() - i;
         this.methodProfiler.b();
-        this.methodProfiler.a("snooper");
-        if (!this.n.d() && this.ticks > 100) {
-            this.n.a();
-        }
-
-        if (this.ticks % 6000 == 0) {
-            this.n.b();
-        }
 
         this.methodProfiler.b();
         this.methodProfiler.b();
@@ -928,54 +914,6 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.P = s1;
     }
 
-    public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(false));
-        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(0));
-        if (this.v != null) {
-            mojangstatisticsgenerator.a("players_current", Integer.valueOf(this.I()));
-            mojangstatisticsgenerator.a("players_max", Integer.valueOf(this.J()));
-            mojangstatisticsgenerator.a("players_seen", Integer.valueOf(this.v.getSeenPlayers().length));
-        }
-
-        mojangstatisticsgenerator.a("uses_auth", Boolean.valueOf(this.onlineMode));
-        mojangstatisticsgenerator.a("gui_state", this.as() ? "enabled" : "disabled");
-        mojangstatisticsgenerator.a("run_time", Long.valueOf((az() - mojangstatisticsgenerator.g()) / 60L * 1000L));
-        mojangstatisticsgenerator.a("avg_tick_ms", Integer.valueOf((int) (MathHelper.a(this.h) * 1.0E-6D)));
-        int i = 0;
-
-        if (this.worldServer != null) {
-            for (int j = 0; j < this.worldServer.length; ++j) {
-                if (this.worldServer[j] != null) {
-                    WorldServer worldserver = this.worldServer[j];
-                    WorldData worlddata = worldserver.getWorldData();
-
-                    mojangstatisticsgenerator.a("world[" + i + "][dimension]", Integer.valueOf(worldserver.worldProvider.getDimension()));
-                    mojangstatisticsgenerator.a("world[" + i + "][mode]", worlddata.getGameType());
-                    mojangstatisticsgenerator.a("world[" + i + "][difficulty]", worldserver.getDifficulty());
-                    mojangstatisticsgenerator.a("world[" + i + "][hardcore]", Boolean.valueOf(worlddata.isHardcore()));
-                    mojangstatisticsgenerator.a("world[" + i + "][generator_name]", worlddata.getType().name());
-                    mojangstatisticsgenerator.a("world[" + i + "][generator_version]", Integer.valueOf(worlddata.getType().getVersion()));
-                    mojangstatisticsgenerator.a("world[" + i + "][height]", Integer.valueOf(this.F));
-                    mojangstatisticsgenerator.a("world[" + i + "][chunks_loaded]", Integer.valueOf(worldserver.N().getLoadedChunks()));
-                    ++i;
-                }
-            }
-        }
-
-        mojangstatisticsgenerator.a("worlds", Integer.valueOf(i));
-    }
-
-    public void b(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.b("singleplayer", Boolean.valueOf(this.T()));
-        mojangstatisticsgenerator.b("server_brand", this.getServerModName());
-        mojangstatisticsgenerator.b("gui_supported", GraphicsEnvironment.isHeadless() ? "headless" : "supported");
-        mojangstatisticsgenerator.b("dedicated", Boolean.valueOf(this.ae()));
-    }
-
-    public boolean getSnooperEnabled() {
-        return true;
-    }
-
     public abstract boolean ae();
 
     public boolean getOnlineMode() {
diff --git a/main/java/net/minecraft/server/MojangStatisticsGenerator.java b/main/java/net/minecraft/server/MojangStatisticsGenerator.java
deleted file mode 100644
index 2c79ba0..0000000
--- a/main/java/net/minecraft/server/MojangStatisticsGenerator.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package net.minecraft.server;
-
-import com.google.common.collect.Maps;
-import java.lang.management.ManagementFactory;
-import java.lang.management.RuntimeMXBean;
-import java.net.MalformedURLException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Timer;
-import java.util.TimerTask;
-import java.util.UUID;
-
-public class MojangStatisticsGenerator {
-
-    private final Map<String, Object> a = Maps.newHashMap();
-    private final Map<String, Object> b = Maps.newHashMap();
-    private final String c = UUID.randomUUID().toString();
-    private final URL d;
-    private final IMojangStatistics e;
-    private final Timer f = new Timer("Snooper Timer", true);
-    private final Object g = new Object();
-    private final long h;
-    private boolean i;
-    private int j;
-
-    public MojangStatisticsGenerator(String s, IMojangStatistics imojangstatistics, long i) {
-        try {
-            this.d = new URI("http://snoop.minecraft.net/" + s + "?version=" + 2).toURL();
-        } catch (URISyntaxException | MalformedURLException malformedurlexception) {
-            throw new IllegalArgumentException();
-        }
-
-        this.e = imojangstatistics;
-        this.h = i;
-    }
-
-    public void a() {
-        if (!this.i) {
-            this.i = true;
-            this.h();
-            this.f.schedule(new TimerTask() {
-                public void run() {
-                    if (MojangStatisticsGenerator.this.e.getSnooperEnabled()) {
-                        HashMap hashmap;
-
-                        synchronized (MojangStatisticsGenerator.this.g) {
-                            hashmap = Maps.newHashMap(MojangStatisticsGenerator.this.b);
-                            if (MojangStatisticsGenerator.this.j == 0) {
-                                hashmap.putAll(MojangStatisticsGenerator.this.a);
-                            }
-
-                            hashmap.put("snooper_count", Integer.valueOf(MojangStatisticsGenerator.f(MojangStatisticsGenerator.this)));
-                            hashmap.put("snooper_token", MojangStatisticsGenerator.this.c);
-                        }
-
-                        HttpUtilities.a(MojangStatisticsGenerator.this.d, (Map) hashmap, true);
-                    }
-                }
-            }, 0L, 900000L);
-        }
-    }
-
-    private void h() {
-        this.i();
-        this.a("snooper_token", this.c);
-        this.b("snooper_token", this.c);
-        this.b("os_name", System.getProperty("os.name"));
-        this.b("os_version", System.getProperty("os.version"));
-        this.b("os_architecture", System.getProperty("os.arch"));
-        this.b("java_version", System.getProperty("java.version"));
-        this.a("version", "1.8.8");
-        this.e.b(this);
-    }
-
-    private void i() {
-        RuntimeMXBean runtimemxbean = ManagementFactory.getRuntimeMXBean();
-        List list = runtimemxbean.getInputArguments();
-        int i = 0;
-        Iterator iterator = list.iterator();
-
-        while (iterator.hasNext()) {
-            String s = (String) iterator.next();
-
-            if (s.startsWith("-X")) {
-                this.a("jvm_arg[" + i++ + "]", s);
-            }
-        }
-
-        this.a("jvm_args", Integer.valueOf(i));
-    }
-
-    public void b() {
-        this.b("memory_total", Long.valueOf(Runtime.getRuntime().totalMemory()));
-        this.b("memory_max", Long.valueOf(Runtime.getRuntime().maxMemory()));
-        this.b("memory_free", Long.valueOf(Runtime.getRuntime().freeMemory()));
-        this.b("cpu_cores", Integer.valueOf(Runtime.getRuntime().availableProcessors()));
-        this.e.a(this);
-    }
-
-    public void a(String s, Object object) {
-        Object object1 = this.g;
-
-        synchronized (this.g) {
-            this.b.put(s, object);
-        }
-    }
-
-    public void b(String s, Object object) {
-        Object object1 = this.g;
-
-        synchronized (this.g) {
-            this.a.put(s, object);
-        }
-    }
-
-    public boolean d() {
-        return this.i;
-    }
-
-    public void e() {
-        this.f.cancel();
-    }
-
-    public long g() {
-        return this.h;
-    }
-
-    static int f(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        return mojangstatisticsgenerator.j++;
-    }
-}
-- 
2.45.1

