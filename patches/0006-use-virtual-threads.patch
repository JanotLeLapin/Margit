From: Joseph DALY <joseph300905@gmail.com>
Date: Wed, 26 Jun 2024 16:00:23 +0200
Subject: [PATCH] use virtual threads


diff --git a/main/java/net/minecraft/server/BlockBeacon.java b/main/java/net/minecraft/server/BlockBeacon.java
index a73d7b1..b83933c 100644
--- a/main/java/net/minecraft/server/BlockBeacon.java
+++ b/main/java/net/minecraft/server/BlockBeacon.java
@@ -62,35 +62,32 @@ public class BlockBeacon extends BlockContainer {
     }
 
     public static void f(final World world, final BlockPosition blockposition) {
-        HttpUtilities.a.submit(new Runnable() {
-            public void run() {
-                Chunk chunk = world.getChunkAtWorldCoords(blockposition);
+        HttpUtilities.factory.newThread(() -> {
+            Chunk chunk = world.getChunkAtWorldCoords(blockposition);
 
-                for (int i = blockposition.getY() - 1; i >= 0; --i) {
-                    final BlockPosition blockposition1 = new BlockPosition(blockposition.getX(), i, blockposition.getZ());
+            for (int i = blockposition.getY() - 1; i >= 0; --i) {
+                final BlockPosition blockposition1 = new BlockPosition(blockposition.getX(), i, blockposition.getZ());
 
-                    if (!chunk.d(blockposition1)) {
-                        break;
-                    }
-
-                    IBlockData iblockdata = world.getType(blockposition1);
+                if (!chunk.d(blockposition1)) {
+                    break;
+                }
 
-                    if (iblockdata.getBlock() == Blocks.BEACON) {
-                        ((WorldServer) world).postToMainThread(new Runnable() {
-                            public void run() {
-                                TileEntity tileentity = world.getTileEntity(blockposition);
+                IBlockData iblockdata = world.getType(blockposition1);
 
-                                if (tileentity instanceof TileEntityBeacon) {
-                                    ((TileEntityBeacon) tileentity).m();
-                                    world.playBlockAction(blockposition, Blocks.BEACON, 1, 0);
-                                }
+                if (iblockdata.getBlock() == Blocks.BEACON) {
+                    ((WorldServer) world).postToMainThread(new Runnable() {
+                        public void run() {
+                            TileEntity tileentity = world.getTileEntity(blockposition);
 
+                            if (tileentity instanceof TileEntityBeacon) {
+                                ((TileEntityBeacon) tileentity).m();
+                                world.playBlockAction(blockposition, Blocks.BEACON, 1, 0);
                             }
-                        });
-                    }
-                }
 
+                        }
+                    });
+                }
             }
-        });
+        }).start();
     }
 }
diff --git a/main/java/net/minecraft/server/DedicatedServer.java b/main/java/net/minecraft/server/DedicatedServer.java
index d8cd7db..0158fcf 100644
--- a/main/java/net/minecraft/server/DedicatedServer.java
+++ b/main/java/net/minecraft/server/DedicatedServer.java
@@ -29,44 +29,31 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     public DedicatedServer(File file) {
         super(file, Proxy.NO_PROXY, DedicatedServer.a);
-        Thread thread = new Thread("Server Infinisleeper") {
-            {
-                this.setDaemon(true);
-                this.start();
-            }
-
-            public void run() {
-                while (true) {
-                    try {
-                        Thread.sleep(2147483647L);
-                    } catch (InterruptedException interruptedexception) {
-                        ;
-                    }
+        Thread thread = Thread.ofVirtual().name("infinisleeper").start(() -> {
+            while (true) {
+                try {
+                    Thread.sleep(2147483647L);
+                } catch (InterruptedException interruptedexception) {
+                    ;
                 }
             }
-        };
+        });
     }
 
     protected boolean init() throws IOException {
-        Thread thread = new Thread("Server console handler") {
-            public void run() {
-                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in));
-
-                String s;
+        Thread thread = Thread.ofVirtual().name("console-handler").start(() -> {
+            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in));
+            String s;
 
-                try {
-                    while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (s = bufferedreader.readLine()) != null) {
-                        DedicatedServer.this.issueCommand(s, DedicatedServer.this);
-                    }
-                } catch (IOException ioexception) {
-                    DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
+            try {
+                while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (s = bufferedreader.readLine()) != null) {
+                    DedicatedServer.this.issueCommand(s, DedicatedServer.this);
                 }
-
+            } catch (IOException ioexception) {
+                DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
             }
-        };
+        });
 
-        thread.setDaemon(true);
-        thread.start();
         DedicatedServer.LOGGER.info("Starting minecraft server version 1.8.8");
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
@@ -201,11 +188,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 }
 
                 if (this.aS() > 0L) {
-                    Thread thread1 = new Thread(new ThreadWatchdog(this));
-
-                    thread1.setName("Server Watchdog");
-                    thread1.setDaemon(true);
-                    thread1.start();
+                    Thread thread1 = Thread.ofVirtual().name("server-watchdog").start(new ThreadWatchdog(this));
                 }
 
                 return true;
diff --git a/main/java/net/minecraft/server/FileIOThread.java b/main/java/net/minecraft/server/FileIOThread.java
index 4733f94..67b60a4 100644
--- a/main/java/net/minecraft/server/FileIOThread.java
+++ b/main/java/net/minecraft/server/FileIOThread.java
@@ -13,10 +13,7 @@ public class FileIOThread implements Runnable {
     private volatile boolean e;
 
     private FileIOThread() {
-        Thread thread = new Thread(this, "File IO Thread");
-
-        thread.setPriority(1);
-        thread.start();
+        Thread thread = Thread.ofVirtual().name("file-io-thread").start(this);
     }
 
     public static FileIOThread a() {
diff --git a/main/java/net/minecraft/server/HttpUtilities.java b/main/java/net/minecraft/server/HttpUtilities.java
index 469683e..b851b7c 100644
--- a/main/java/net/minecraft/server/HttpUtilities.java
+++ b/main/java/net/minecraft/server/HttpUtilities.java
@@ -15,13 +15,14 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class HttpUtilities {
 
-    public static final ListeningExecutorService a = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool((new ThreadFactoryBuilder()).setDaemon(true).setNameFormat("Downloader %d").build()));
+    public static final ThreadFactory factory = Thread.ofVirtual().name("http-downloader", 0).factory();
     private static final AtomicInteger b = new AtomicInteger(0);
     private static final Logger c = LogManager.getLogger(HttpUtilities.class);
 
diff --git a/main/java/net/minecraft/server/LoginListener.java b/main/java/net/minecraft/server/LoginListener.java
index 04e2eb0..dcff199 100644
--- a/main/java/net/minecraft/server/LoginListener.java
+++ b/main/java/net/minecraft/server/LoginListener.java
@@ -12,6 +12,7 @@ import java.security.PrivateKey;
 import java.util.Arrays;
 import java.util.Random;
 import java.util.UUID;
+import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.crypto.SecretKey;
 import org.apache.commons.lang3.Validate;
@@ -20,7 +21,7 @@ import org.apache.logging.log4j.Logger;
 
 public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBox {
 
-    private static final AtomicInteger b = new AtomicInteger(0);
+    private static final ThreadFactory factory = Thread.ofVirtual().name("user-authenticator", 0).factory();
     private static final Logger c = LogManager.getLogger(LoginListener.class);
     private static final Random random = new Random();
     private final byte[] e = new byte[4];
@@ -139,38 +140,35 @@ public class LoginListener implements PacketLoginInListener, IUpdatePlayerListBo
             this.loginKey = packetlogininencryptionbegin.a(privatekey);
             this.g = LoginListener.EnumProtocolState.AUTHENTICATING;
             this.networkManager.a(this.loginKey);
-            (new Thread("User Authenticator #" + LoginListener.b.incrementAndGet()) {
-                public void run() {
-                    GameProfile gameprofile = LoginListener.this.i;
-
-                    try {
-                        String s = (new BigInteger(MinecraftEncryption.a(LoginListener.this.j, LoginListener.this.server.Q().getPublic(), LoginListener.this.loginKey))).toString(16);
-
-                        LoginListener.this.i = LoginListener.this.server.aD().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, null);
-                        if (LoginListener.this.i != null) {
-                            LoginListener.c.info("UUID of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
-                        } else if (LoginListener.this.server.T()) {
-                            LoginListener.c.warn("Failed to verify username but will let them in anyway!");
-                            LoginListener.this.i = LoginListener.this.a(gameprofile);
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
-                        } else {
-                            LoginListener.this.disconnect("Failed to verify username!");
-                            LoginListener.c.error("Username \'" + LoginListener.this.i.getName() + "\' tried to join with an invalid session");
-                        }
-                    } catch (AuthenticationUnavailableException authenticationunavailableexception) {
-                        if (LoginListener.this.server.T()) {
-                            LoginListener.c.warn("Authentication servers are down but will let them in anyway!");
-                            LoginListener.this.i = LoginListener.this.a(gameprofile);
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
-                        } else {
-                            LoginListener.this.disconnect("Authentication servers are down. Please try again later, sorry!");
-                            LoginListener.c.error("Couldn\'t verify username because servers are unavailable");
-                        }
+            LoginListener.factory.newThread(() -> {
+                GameProfile gameprofile = LoginListener.this.i;
+
+                try {
+                    String s = (new BigInteger(MinecraftEncryption.a(LoginListener.this.j, LoginListener.this.server.Q().getPublic(), LoginListener.this.loginKey))).toString(16);
+
+                    LoginListener.this.i = LoginListener.this.server.aD().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, null);
+                    if (LoginListener.this.i != null) {
+                        LoginListener.c.info("UUID of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
+                        LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                    } else if (LoginListener.this.server.T()) {
+                        LoginListener.c.warn("Failed to verify username but will let them in anyway!");
+                        LoginListener.this.i = LoginListener.this.a(gameprofile);
+                        LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                    } else {
+                        LoginListener.this.disconnect("Failed to verify username!");
+                        LoginListener.c.error("Username \'" + LoginListener.this.i.getName() + "\' tried to join with an invalid session");
+                    }
+                } catch (AuthenticationUnavailableException authenticationunavailableexception) {
+                    if (LoginListener.this.server.T()) {
+                        LoginListener.c.warn("Authentication servers are down but will let them in anyway!");
+                        LoginListener.this.i = LoginListener.this.a(gameprofile);
+                        LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                    } else {
+                        LoginListener.this.disconnect("Authentication servers are down. Please try again later, sorry!");
+                        LoginListener.c.error("Couldn\'t verify username because servers are unavailable");
                     }
-
                 }
-            }).start();
+            }).start();;
         }
     }
 
diff --git a/main/java/net/minecraft/server/MinecraftServer.java b/main/java/net/minecraft/server/MinecraftServer.java
index 489ee8a..a57fe7d 100644
--- a/main/java/net/minecraft/server/MinecraftServer.java
+++ b/main/java/net/minecraft/server/MinecraftServer.java
@@ -650,7 +650,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             }
 
             dedicatedserver.D();
-            Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread") {
+            Runtime.getRuntime().addShutdownHook(new Thread("server-stop") {
                 public void run() {
                     dedicatedserver.stop();
                 }
@@ -662,8 +662,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     }
 
     public void D() {
-        this.serverThread = new Thread(this, "Server thread");
-        this.serverThread.start();
+        this.serverThread = Thread.ofPlatform().name("server").start(this);
     }
 
     public File d(String s) {
diff --git a/main/java/net/minecraft/server/NetworkManager.java b/main/java/net/minecraft/server/NetworkManager.java
index b4d018c..f032f60 100644
--- a/main/java/net/minecraft/server/NetworkManager.java
+++ b/main/java/net/minecraft/server/NetworkManager.java
@@ -1,7 +1,6 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Queues;
-import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
@@ -35,7 +34,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     public static final AttributeKey<EnumProtocol> c = AttributeKey.valueOf("protocol");
     public static final LazyInitVar<NioEventLoopGroup> d = new LazyInitVar() {
         protected NioEventLoopGroup a() {
-            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).build());
+            return new NioEventLoopGroup(0, Thread.ofVirtual().name("netty-client-io", 0).factory());
         }
 
         protected Object init() {
@@ -44,7 +43,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     };
     public static final LazyInitVar<EpollEventLoopGroup> e = new LazyInitVar() {
         protected EpollEventLoopGroup a() {
-            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
+            return new EpollEventLoopGroup(0, Thread.ofVirtual().name("netty-epoll-client-io", 0).factory());
         }
 
         protected Object init() {
@@ -53,7 +52,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     };
     public static final LazyInitVar<LocalEventLoopGroup> f = new LazyInitVar() {
         protected LocalEventLoopGroup a() {
-            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
+            return new LocalEventLoopGroup(0, Thread.ofVirtual().name("netty-local-client-io", 0).factory());
         }
 
         protected Object init() {
diff --git a/main/java/net/minecraft/server/RemoteConnectionThread.java b/main/java/net/minecraft/server/RemoteConnectionThread.java
index 6109842..4dfc972 100644
--- a/main/java/net/minecraft/server/RemoteConnectionThread.java
+++ b/main/java/net/minecraft/server/RemoteConnectionThread.java
@@ -10,7 +10,6 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 public abstract class RemoteConnectionThread implements Runnable {
 
-    private static final AtomicInteger h = new AtomicInteger(0);
     protected boolean a;
     protected IMinecraftServer b;
     protected final String c;
@@ -29,7 +28,7 @@ public abstract class RemoteConnectionThread implements Runnable {
     }
 
     public synchronized void a() {
-        this.d = new Thread(this, this.c + " #" + RemoteConnectionThread.h.incrementAndGet());
+        this.d = Thread.ofVirtual().name(this.c).start(this);
         this.d.start();
         this.a = true;
     }
diff --git a/main/java/net/minecraft/server/ServerConnection.java b/main/java/net/minecraft/server/ServerConnection.java
index 38a3a18..0512e9a 100644
--- a/main/java/net/minecraft/server/ServerConnection.java
+++ b/main/java/net/minecraft/server/ServerConnection.java
@@ -1,7 +1,6 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -32,7 +31,7 @@ public class ServerConnection {
     private static final Logger e = LogManager.getLogger(ServerConnection.class);
     public static final LazyInitVar<NioEventLoopGroup> a = new LazyInitVar() {
         protected NioEventLoopGroup a() {
-            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+            return new NioEventLoopGroup(0, Thread.ofVirtual().name("netty-server-io", 0).factory());
         }
 
         protected Object init() {
@@ -41,7 +40,7 @@ public class ServerConnection {
     };
     public static final LazyInitVar<EpollEventLoopGroup> b = new LazyInitVar() {
         protected EpollEventLoopGroup a() {
-            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+            return new EpollEventLoopGroup(0, Thread.ofVirtual().name("netty-epoll-server-io", 0).factory());
         }
 
         protected Object init() {
@@ -50,7 +49,7 @@ public class ServerConnection {
     };
     public static final LazyInitVar<LocalEventLoopGroup> c = new LazyInitVar() {
         protected LocalEventLoopGroup a() {
-            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
+            return new LocalEventLoopGroup(0, Thread.ofVirtual().name("netty-local-server-io", 0).factory());
         }
 
         protected Object init() {
-- 
2.45.1

